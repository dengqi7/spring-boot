
1.初始化准备：

1)sources= LinkedHashSet 
	class com.example.demo.DemoApplication
2)initializeres
3)listeners
getSpringFactoriesInstances
	1）从spring.factories文件获取值
	key=interface org.springframework.context.ApplicationContextInitializer
	value--LinkedHashSet:
		0 = "org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer"(spring-boot)
		1 = "org.springframework.boot.context.ContextIdApplicationContextInitializer"(spring-boot)
		2 = "org.springframework.boot.context.config.DelegatingApplicationContextInitializer"(spring-boot)
		3 = "org.springframework.boot.context.embedded.ServerPortInfoApplicationContextInitializer"(spring-boot)
		4 = "org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer"  （spring-boot-autoconfigure）
		5 = "org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer"（spring-boot-autoconfigure）
	
	createSpringFactoriesInstances
		 BeanUtils.instantiateClass
	排序	 
	SORT---AnnotationAwareOrderComparator--
	
	
	2）从spring.factories文件获取值
	key=org.springframework.context.ApplicationListener
	value--LinkedHashSet:
		0 = "org.springframework.boot.ClearCachesApplicationListener"(spring-boot)--ContextRefreshedEvent

		1 = "org.springframework.boot.builder.ParentContextCloserApplicationListener"--ParentContextAvailableEvent
		      容器关闭时发出通知，如果父容器关闭，那么自容器也一起关闭
		2 = "org.springframework.boot.context.FileEncodingApplicationListener"--ApplicationEnvironmentPreparedEvent
		    在springboot环境准备完成以后运行，获取环境中的系统环境参数，检测当前系统环境的file.encoding和spring.mandatory-file-encoding设置的值是否一样,如果不一样则抛出异常
		    如果不配置spring.mandatory-file-encoding则不检查
		3 = "org.springframework.boot.context.config.AnsiOutputApplicationListener"--ApplicationEnvironmentPreparedEvent
		    在springboot环境准备完成以后运行， 如果你的终端支持ANSI，设置彩色输出会让日志更具可读性。
		4 = "org.springframework.boot.context.config.ConfigFileApplicationListener"--ApplicationEnvironmentPreparedEvent
		    很重要，详讲
		5 = "org.springframework.boot.context.config.DelegatingApplicationListener"--ApplicationEnvironmentPreparedEvent
		    通过context.listener.classes参数加载Listener，转发event给配置的这些class处理，这样可以支持外围代码不去写spring.factories中的org.springframework.context.ApplicationListener相关配置，保持springboot原来代码的稳定
		6 = "org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener"
		    如果存在，则使用springboot相关的版本进行替代
		7 = "org.springframework.boot.logging.ClasspathLoggingApplicationListener"--ApplicationEnvironmentPreparedEvent与ApplicationFailedEvent
		    --debug时打印classpath，
		8 = "org.springframework.boot.logging.LoggingApplicationListener"(spring-boot)--ApplicationStartingEvent、ApplicationEnvironmentPreparedEvent
		    --根据配置初始化日志系统log
		9 = "org.springframework.boot.autoconfigure.BackgroundPreinitializer"（spring-boot-autoconfigure）--ApplicationStartingEvent、ApplicationReadyEvent、ApplicationFailedEvent
		    --ApplicationStartingEvent出发异步预初始化，利用类静态CountDownLatch锁，阻塞ApplicationReadyEvent、ApplicationFailedEvent，直到保证异步初始化结束
		
4)mainApplicationClass = class com.example.demo.DemoApplication





2、run
2.1 执行方法	ConfigurableApplicationContext run(String... args)
	1）StopWatch计时
	2）设置系统参数java.awt.headless为true，在headless模式下运行
		System.setProperty("java.awt.headless",true)
	3）初始化SpringApplicationRunListener并逐一调用starting()方法，Spring默认只有一个实例；
		工厂模式，利用SpringApplicationRunListeners类存储SpringApplicationRunListener列表，遍历调用starting()方法，利于扩展。
		starter组件spring.factories中添加配置可以实现自定义的runListster
		默认只有一个org.springframework.boot.context.event.EventPublishingRunListener
		
		初始化过程：
		1、application
		2、arg
		3、SimpleApplicationEventMulticaster初始化并且listerner列表赋值
			org.springframework.context.event.AbstractApplicationEventMulticaster#addApplicationListener
				--加锁、存储在属性defaultRetriever（包装类AbstractApplicationEventMulticaster.ListenerRetriever）的applicationListeners[new LinkedHashSet()]
				--如果listener是proxy对象，会将targetSource对象从applicationListeners移除
		
		starting()方法，发布event，
			1.5.21发布的是ApplicationStartingEvent，2.x后改为ApplicationStartingEvent
		
		org.springframework.context.event.SimpleApplicationEventMulticaster#multicastEvent(org.springframework.context.ApplicationEvent)
			--event对应ResolvableType（默认是event的Class作为resolved值）
			AbstractApplicationEventMulticaster#getApplicationListeners(ApplicationEvent, ResolvableType)方法获取注册的listener
			缓存--eventType[ResolvableType]与sourceType[SpringBootApplication.class]作为cacheKey
		遍历调用listener.onApplicationEvent(event)方法
	 
	 
	
	 发布事件ApplicationStartingEvent
		0 = {LoggingApplicationListener@1236} --获取LoggingSystem类，按顺序取第一个org.springframework.boot.logging.logback.LogbackLoggingSystem，调用beforeInitialize()；
				根据配置初始化日志系统log
		1 = {BackgroundPreinitializer@1238} --异步初始化ConversionServiceInitializer、ValidationInitializer、MessageConverterInitializer、JacksonInitializer、CharsetInitializer
		2 = {DelegatingApplicationListener} --未生效，仅对ApplicationEnvironmentPreparedEvent触发
		3 = {LiquibaseServiceLocatorApplicationListener@1243} ...liquibase.servicelocator.CustomResolverServiceLocator类引入时才执行
	 
	4）初始化ApplicationArguments--对应实体DefaultApplicationArguments 
	
	5）prepareEnvironment()
	    --getOrCreateEnvironment()初始化系统环境参数，environment.propertySources
	        new()方法中调用customizePropertySources()方法加载PropertySources
	        +StandardEnvironment（systemProperties、systemEnvironment）
	        +StandardReactiveWebEnvironment 同StandardEnvironment
	        +StandardServletEnvironment（StubPropertySource：servletConfigInitParams、servletContextInitParams，PropertiesPropertySource[systemProperties、systemEnvironment]）
		--configureEnvironment()--sources or profiles
		    --addConversionService...
		    --configurePropertySources()初始化defaultProperties、启动参数
		        if-defaultProperties，默认无
			    if-addCommandLineProperties&&argsargs.length > 0 启动参数
			        addFisrst()-commandLineArgs [springApplicationCommandLineArgs]，优先级高于systemProperties
        --ConfigurationPropertySources.attach()
            添加最高优先级configurationProperties--值为已有的source集合
	    --发布事件ApplicationEnvironmentPreparedEvent
		    0 = ConfigFileApplicationListener-加载springboot配置文件
			--loadPostProcessors();--从spring.facotries中读取EnvironmentPostProcessor值
				默认4个
			--postProcessors.add(this)--
			--sort后，this的index是3；
			--遍历postProcessors
                0 = SystemEnvironmentPropertySourceEnvironmentPostProcessor --处理systemEnvironment
					--SystemEnvironmentPropertySource替换为OriginAwareSystemEnvironmentPropertySource，添加了Orign跟踪
				1 = SpringApplicationJsonEnvironmentPostProcessor
					--spring.application.json、SPRING_APPLICATION_JSON有值时初始化JsonPropertyValue（仅取第一个）
				    添加配置JsonPropertySource，name = spring.application.json,优先级仅高于systemProperties
				2 = {CloudFoundryVcapEnvironmentPostProcessor@1677}
					--从Cloud Foundry加载参数--VCAP_APPLICATION、VCAP_SERVICES，提供springCloud支持
					添加配置PropertiesPropertySource,name=vcap,优先级仅低于commandLineArgs
				3 = this
				4 = DebugAgentEnvironmentPostProcessor 			    ......
			    this:
				--添加source-RandomValuePropertySource {name='random'}，优先级仅低于systemEnvironment
				
				new Loader(environment, resourceLoader).load()--加载配置文件，支持profile
					--Loader()
						*environment，
						*PropertySourcesPlaceholdersResolver初始化:
							source--from enviroment
							hepler--PropertyPlaceholderHelper占位符解析:${:}，resolvePlaceholders()方法作用：将${name}值替换为name参数的配置值
						*resourceLoader	
						*propertySourceLoaders--从spring.factories文件获取值org.springframework.boot.env.PropertySourceLoader
								org.springframework.boot.env.PropertiesPropertySourceLoader,--{ "properties", "xml" }后缀文件
								org.springframework.boot.env.YamlPropertySourceLoader--{ "yml", "yaml" }
								**properties文件优先级最高
					--ConfigFileApplicationListener.Loader#load()
						*profiles=new LinkedList<>()
						*processedProfiles=new LinkedList<>()
						*loaded=new LinkedHashMap<>()
						--initializeProfiles()：		
							-- profiles
								*1.add(null)
								*2.add(otherActiveProfiles)--除includedViaProperty、activatedViaProperty外enviroment中的profiles
								*3.add(includedViaProperty)--spring.profiles.include，environment配置
								*4.add(activatedViaProperty)--spring.profiles.active，environment配置
								*如果没有配置系统参数，profiles只有一个元素，添加默认Profile，defaultProfileName = 'default'
						--遍历profiles
							if 默认profile，
								environment.getActiveProfiles()--根据spring.profiles.active值加载
								environment.addActiveProfile(defaultProfile)；添加++
							--load(xxxx)方法--加载profile
								--processedProfiles.add(profile)，
							--补充load(xxx)：profile == null && !ObjectUtils.isEmpty(document.getProfiles())
							    最后加载有spring.profiles参数的默认文件
							--processedProfiles.add(profile)
						--addLoadedPropertySources();
								将loaded中的MutablePropertySource[profile]添加到enviroment.propertySources中，addLast()但在defaultProperties前
								loaded做了倒排序，优先级默认文件<profile
								示例顺序：
								0-classpath:/config/application.yml
								1-classpath:/application.properties
								2-classpath:/application.yml
						--applyActiveProfiles(defaultProperties)
								if defaultProperties!=null
									加载配置的profile，合并processedProfiles值
									environment.setActiveProfiles();
					    --load(xxxx)方法：
						    --getSearchLocations()
							    *spring.config.location指定自定义配置地址，return；
							    *spring.config.additional-location，追加的配置地址，优先级>默认location值
							    *默认location值classpath:/,classpath:/config/,file:./,file:./config/，做了倒排序，所以file:./config/优先级最高，classpath:/config/>classpath:/
							        file:文件路径--项目jar包目录
							        classpath:class路径查找，没有的话依次在其他jar包中class路径查找，找到第一个匹配的为止

						    --遍历loacations->
							    if location.endsWith("/")，调用getSearchNames(),
								    *spring.config.name配置文件名
								    *默认name=application
							     else name=null(指定location值含文件名时)
							    --load() 加载文件配置MutablePropertySources，保存到loaded属性
							        格式：String profileSpecificFile = prefix + "-" + profile + fileExtension;

                                	+profile有值时，获取的文件名是application-profile.xxx;
                                	    *文件中无spring.profiles参数时加载配置到loaded
                                	    *有spring.profiles参数时，必须包含指定profile才加载
                                    +默认文件名application.xxx，MutablePropertySources.name=applicationConfig: [classpath:/config/application.yml]
                                        *文件中无spring.profiles参数时加载
                                    profile优先级高

						        优先级顺序：profile>location>.ext
						        config/application-default.properties > config/application-default.yml > application-default.properties > application-default.yml > config/application.properties > config/application.yml > application.properties > application.yml

						疑问UNDO:
						    1、配置参数值是值怎么赋值给bean的时？refresh()初始Bean并注册到BeanFactory中时
						    2、配置参数最后使用哪个值？propertySources中优先级最高的最后加载？
						    3、configurationProperties的作用是什么，会导致source执行两次？对全量sourceProperty的引用
		    1 = {AnsiOutputApplicationListener@2179} --参数spring.output.ansi.enabled、spring.output.ansi.console-available，终端支持ANSI，彩色输出
		    2 = {LoggingApplicationListener@1237}--initialize()
		    3 = {ClasspathLoggingApplicationListener@2180} --debug时打印classpath
		    4 = {BackgroundPreinitializer@1353} --未处理
		    5 = {DelegatingApplicationListener@1356} --参数context.listener.classes有值时，生成一个SimpleApplicationEventMulticaster，加载对应listener并发布event，代理类
		    6 = {FileEncodingApplicationListener@2181} --如果配置了spring.mandatory-file-encoding参数，和系统参数file.encoding不一致会报错

        --绑定参数spring.main=当前实例
        --再次ConfigurationPropertySources.attach()，替换原configurationProperties

    6)configureIgnoreBeanInfo
        如果系统参数spring.beaninfo.ignore为空，赋值enviroment中的spring.beaninfo.ignore值，默认true
    7)打印Banner
        获取图片--spring.banner.image.location|banner.gif.jpg.png
        获取txt--banner.txt
    8)createApplicationContext()
        WEB: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext
        RE:org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext
        DE:org.springframework.context.annotation.AnnotationConfigApplicationContext

        初始化AnnotationConfigServletWebServerApplicationContext
        AnnotatedBeanDefinitionReader reader
            **ConditionEvaluator
            **environment为StandardServletEnvironment
            **beanFactory为DefaultListableBeanFactory
            beanFactory中注入ConfigProcessors的BeanDefinition
              *beanDefinitionMap-
              *beanDefinitionNames-

        ClassPathBeanDefinitionScanner scanner
            scanner默认处理的注解：@Component、@Repository、@Service、@Controller

    9)初始化SpringBootExceptionReporter类
        FailureAnalyzers--
    10) prepareContext()
        *context.setEnviroment
        --postProcessApplicationContext()
            *可定制-beanNameGenerator、resourceLoader、resourceLoader
            *配置ApplicationConversionService
        --applyInitializers()
          application的 initializers属性，初始化时加载的
          遍历调用ApplicationContextInitializer接口的initialize()方法，context为入参

               2)SharedMetadataReaderFactoryContextInitializer-无处理
                    --context.addBeanFactoryPostProcessor,CachingMetadataReaderFactoryPostProcessor
               3)ContextIdApplicationContextInitializer
                    --new ContextId-id默认为application,child标识为AtomicLong(0)
                    context.id赋值
                    beanFactory注册ContextId
               4)ConfigurationWarningsApplicationContextInitializer
                    context.addBeanFactoryPostProcessor ConfigurationWarningsPostProcessor
               5)ServerPortInfoApplicationContextInitializer
                    application.listeners属性添加这个实例作到列表
               6)ConditionEvaluationReportLoggingListener
                    -application.listenerss属性添加 ConditionEvaluationReportListener
                    -get fail Report   autoConfigurationReport--ConditionEvaluationReport

        --发布ApplicationContextInitializedEvent
            DelegatingApplicationListener--代理事件发布
         --打印starting  以及 active profile infos  日志
         --beanFactory.registerSingleton():默认是DefaultListableBeanFactory
            *springApplicationArguments
            *springBootBanner
            *beanFactory的allowBeanDefinitionOverriding false

        --getAllSources()
            默认是启动类Class
        --load()?
            loader = new BeanDefinitionLoader
                **sources:启动类Class
                **annotatedReader =new AnnotatedBeanDefinitionReader,同webContext的初始化
                **xmlReader = new XmlBeanDefinitionReader
                **scanner = new ClassPathBeanDefinitionScanner 同webContext初始化
                **scanner.addExcludeFilter()--ClassExcludeFilter--classNames属性，保存了应扫描过的类，此处存的是启动类ClassName

            loader.load()
              遍历sources
                load(..sources..)
                --swich source 类型Class\Resource\Package\CharSequence
                  load(..source..)-Class
                    --if isComponent()是否含有@Component注解
                    packages：java.lang,org.springframework.lang,
                    策略：TYPE_HIERARCHY including superclasses and implemented interfaces
                    search-org.springframework.stereotype.Component
                    示例：启动类interface org.springframework.boot.autoconfigure.SpringBootApplication
                        AnnotationTypeMappings.forAnnotationType(type)方法获取所有的注解列表
                        遍历判断是否含有org.springframework.stereotype.Component
                        注解继承关系@SpringBootConfiguration->@Configuration->@Component
                    true--AnnotatedBeanDefinitionReader.register(Class)
                        doRegisterBean()
                            --new AnnotatedGenericBeanDefinition-启动类的注解BeanDefinition--AnnotationMetadata属性
                            --判断是否有@Conditional注解
                            --判断ScopeMetadata--默认singleton
                            --beanName生成，默认是首字母小写的ClassName，可注解指定beanName
                            --注解默认处理流程：Lazy、Primary、DependsOn、Role、Description
                            --new BeanDefinitionHolder
                            -- 通过ScopedProxyMode确认是否返回代理类的BeanDefinitionHolder
                            -- BeanDefinitionReaderUtils.registerBeanDefinition()
                                --context.beanFactory注册BeanDefinition
                                --如果有配置aliases，遍历注册beanName-alias

                        只是调用DefaultListableBeanFactory.registerBeanDefinition()，没有调用registerSingleton()方法，refreshContext()时才真正注册Component对象呢？
        --广播事件-ApplicationPreparedEvent
            在发送事件前会遍历所有listener,if instanceof ApplicationContextAware,setContext。

            1)ConfigFileApplicationListener
                context.addBeanFactoryPostProcessor  PropertySourceOrderingPostProcessor 配置property-sources




                AnnotationConfigServletWebServerApplicationContext extends ServletWebServerApplicationContext
                *AnnotatedBeanDefinitionReader
                *ClassPathBeanDefinitionScanner
                *annotatedClasses=new LinkedHashSet<>()
                *basePackages String[]
                *-s DefaultListableBeanFactory beanFactory
                Bean的初始化是在refresh refreshed
                注解工具类AnnotationUtil递归findAnnotation标记类是否有注解，有cache

        --发布ApplicationPreparedEvent
            -- 遍历listener，添加context属性
            --处理类
            0 = ConfigFileApplicationListener
                --context中BeanFactoryPostProcessor：PropertySourceOrderingPostProcessor
            1 = LoggingApplicationListener
                 --beanFactory中注册 springBootLoggingSystem、springBootLogFile、springBootLoggerGroups
            3 = {DelegatingApplicationListener@2150}
                --event转发
    11)refreshContext()
        -refresh() AbstractApplication
            --prepareRefresh()
                initPropertySources()--web有关的propertySource操作
                    propertySource还未使用，但可以通过PropertySourcesPropertyResolver.getProperty(key)获取value值，遍历PropertySource集合,return first Key-value
                earlyListeners add to ....
            --obtainFreshBeanFactory()

            --prepareBeanFactory(beanFactory)
                。。。
                beanFactory.addBeanPostProcessor  ApplicationContextAwareProcessor、ApplicationListenerDetector
                registerResolvableDependency
                registerSingleton ：environment、systemProperties、systemEnvironment，只能registe一次，实际调用addSingleton方法

            --
                beanFactory.addBeanPostProcessor    WebApplicationContextServletContextAwareProcessor










    12)afterRefresh()
    13)stopWatch.stop()
    14)发布ApplicationStartedEvent--SimpleApplicationEventMulticaster已经替换为refreshContext()中新生成的，
        包含beanFactory中新加载的listener
    15)callRunners()
        --contxt中所有的ApplicationRunner.class对象
        --contxt中所有的CommandLineRunner.class对象
        执行ApplicationRunner.run(),CommandLineRunner.run()
    16)发布ApplicationReadyEvent
        BackgroundPreinitializer,CountDownLatch.await()，等待异步预初始化结束



context.beanFactory.addBeanPostProcessor
ApplicationContextAwareProcessor
ApplicationListenerDetector

beanFactory.registerSingleton
environment、systemProperties、systemEnvironment


invokeBeanFactoryPostProcessors()
*从context中添加到beanFactory中：
SharedMetadataReaderFactoryContextInitializer$CachingMetadataReaderFactoryPostProcessor
ConfigurationWarningsApplicationContextInitializer$ConfigurationWarningsPostProcessor
ConfigFileApplicationListener$PropertySourceOrderingPostProcessor

ConfigurationClassParser.parse()获取解析所有的@Configuration类
--parse()
--deferredImportSelectorHandler.process()
所有的配置类，包括引用jar包里的，

import类注册
AutoConfigurationPackages.Registrar


新生成一个applicationEventMulticaster(注入beanFactory)，注册到beanFactory








3、注解
	@SpringBootApplication	 
		@SpringBootConfiguration ->@Configuration
		@EnableAutoConfiguration ->自动配置
		@ComponentScan	->扫描组件包
	 
	 
springboot master分支、2.0.x,1.5.x分支的关系和区别？	 
SimpleApplicationEventMulticaste的	Map<ListenerCacheKey, ListenerRetriever> retrieverCache 属性可以按envent类型快速获取对应的listener
	
napture的加载用到了DefaultPropertySourceLocator做参数加载
spring.factories文件中添加了自动配置类。	
	 
	

•Spring Boot是如何让系统开发效率飞起
-starter组件

how？
1、流程步骤，关键类与方法
2、类图关系-作用
3、事件消息机制、配置自动加载、starter原理、refresh-context容器初始化、主要注解、web-内置serverlet容器、环境系统、日志系统
	
	
	
精彩文章
微众-吉姆餐厅ak-springboot源码：http://mp.weixin.qq.com/mp/homepage?__biz=MzUwOTk1MTE5NQ==&hid=2&sn=837d8daa637b93c7087800a41f7e012f&scene=18#wechat_redirect
https://blog.csdn.net/zhang_yinan/article/details/80743585
https://blog.csdn.net/dm_vincent/article/details/76735888	
	
	
spring 时间广播机制	
	

示例

1、添加一个starter模块，自动加载初始化类和环境参数	
2、添加一个监控器，监听广播事件--用途？	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	